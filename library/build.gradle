apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco-android'

android {
    compileSdkVersion 28
    dataBinding {
        enabled = true
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs = ['src/test/kotlin']
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha3'
    kapt "com.android.databinding:compiler:3.1.3"

    testImplementation "org.mockito:mockito-core:2.19.1"
    testImplementation "androidx.arch.core:core-testing:2.0.0-beta01"
    androidTestImplementation "androidx.test:rules:1.1.0-alpha3"
    androidTestImplementation "androidx.test:runner:1.1.0-alpha3"
}
repositories {
    mavenCentral()
}

project.afterEvaluate {
    //Gather build type and product flavor names in a list
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description =
                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
                    html.enabled true
                }

                //Directory where the compiled class files are
                classDirectories =
                        fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                                excludes: ['**/R.class',
                                           '**/BR.class',
                                           '**/*Activity.class',
                                           '**/R$*.class',
                                           '**/*$ViewInjector*.*',
                                           '**/*$ViewBinder*.*',
                                           '**/BuildConfig.*',
                                           'android/**',
                                           '**/Manifest*.*',
                                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                                           '**/*Module.*', // Modules for Dagger.
                                           '**/*Dagger*.*', // Dagger auto-generated code.
                                           '**/*MembersInjector*.*', // Dagger auto-generated code.
                                           '**/*_Provide*Factory*.*',
                                           '**/*_Factory.*', //Dagger auto-generated code
                                           '**/*$*$*.*' // Anonymous classes generated by kotlin
                                ])

                sourceDirectories = files(["src/main/kotlin",
                                           "src/$productFlavorName/kotlin",
                                           "src/$buildTypeName/kotlin"])

                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}
